Index: Backend/src/main/java/com/example/transaction/service/impl/CommodityServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.transaction.service.impl;\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\r\nimport com.baomidou.mybatisplus.core.metadata.IPage;\r\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\r\nimport com.example.transaction.dao.CommodityDAO;\r\nimport com.example.transaction.dao.CommodityImageDAO;\r\nimport com.example.transaction.dao.TypeDAO;\r\nimport com.example.transaction.pojo.*;\r\nimport com.example.transaction.service.CommodityService;\r\nimport com.example.transaction.util.AccountVerify;\r\nimport com.example.transaction.util.MyPage;\r\nimport com.example.transaction.util.Nums;\r\nimport com.example.transaction.util.responseFromServer;\r\nimport org.apache.ibatis.annotations.Options;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.springframework.transaction.interceptor.TransactionAspectSupport;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport javax.servlet.http.HttpSession;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.sql.Timestamp;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * @Author: 高战立\r\n * @Date: 2020/4/26 15:46\r\n * @Content:\r\n */\r\n\r\n@Service\r\npublic class CommodityServiceImpl implements CommodityService {\r\n    private final CommodityDAO commodityDAO;\r\n    private final TypeDAO typeDAO;\r\n    private final CommodityImageDAO commodityImageDAO;\r\n    private int count = 0;\r\n    @Autowired\r\n    CommodityServiceImpl(CommodityDAO commodityDAO, TypeDAO typeDAO, CommodityImageDAO commodityImageDAO){\r\n        this.commodityDAO = commodityDAO;\r\n        this.typeDAO = typeDAO;\r\n        this.commodityImageDAO = commodityImageDAO;\r\n    }\r\n\r\n    /**\r\n     * 根据id获取商品信息\r\n     * @param id 商品id\r\n     * @return 执行结果\r\n     */\r\n    public responseFromServer getById(Integer id){\r\n        QueryWrapper<Commodity> queryWrapper = new QueryWrapper<>();\r\n        queryWrapper.eq(\"id\", id);\r\n        //id查找是唯一的\r\n        List<Commodity> commodities = commodityDAO.selectWithCondition(queryWrapper);\r\n        return responseFromServer.success(commodities.get(0));\r\n    }\r\n\r\n    /**\r\n     * 商品名称模糊检索，崭新程度排序\r\n     * @param pageIndex 当前页数\r\n     * @param name 商品名\r\n     * count为偶数:顺序（从小到大）；奇数:倒序\r\n     * @return Commodity数组\r\n     */\r\n    public responseFromServer getByNameSortedByNewness(Integer pageIndex, String name){\r\n        Page<Commodity> page = new Page<>(pageIndex, Nums.pageSize);\r\n        Timestamp timestamp = new Timestamp(System.currentTimeMillis()); //当前时间\r\n        IPage<Commodity> iPage = commodityDAO.sortByNewness(page, name, timestamp);\r\n        MyPage<Commodity> myPage = new MyPage<>(iPage);\r\n        return responseFromServer.success(myPage);\r\n    }\r\n\r\n    /**\r\n     * 根据类型分类\r\n     * @param typeId 标签\r\n     * @return Commodity数组\r\n     */\r\n    public responseFromServer getByTypeId(Integer pageIndex, Integer typeId){\r\n        Page<Commodity> page = new Page<>(pageIndex, Nums.pageSize);\r\n        Timestamp timestamp = new Timestamp(System.currentTimeMillis()); //当前时间\r\n        IPage<Commodity> iPage = commodityDAO.sortByType(page, typeId, timestamp);\r\n        MyPage<Commodity> myPage = new MyPage<>(iPage);\r\n        return responseFromServer.success(myPage);\r\n    }\r\n\r\n    /**\r\n     * 根据价格区间筛选物品\r\n     * @param low 最低价\r\n     * @param high 最高价\r\n     * @return Commodity数组\r\n     */\r\n    public responseFromServer getBetweenPrice(Integer pageIndex, String name, Integer low, Integer high){\r\n        Page<Commodity> page = new Page<>(pageIndex, Nums.pageSize);\r\n        Timestamp timestamp = new Timestamp(System.currentTimeMillis()); //当前时间\r\n        IPage<Commodity> iPage = commodityDAO.betweenPrice(page, name, low, high, timestamp);\r\n        MyPage<Commodity> myPage = new MyPage<>(iPage);\r\n        return responseFromServer.success(myPage);\r\n    }\r\n\r\n    /**\r\n     * 根据所有者信誉排序\r\n     * @param name 商品名\r\n     * @return Commodity数组\r\n     */\r\n    public responseFromServer sortByCredit(Integer pageIndex, String name){\r\n        Page<Commodity> page = new Page<>(pageIndex, Nums.pageSize);\r\n        Timestamp timestamp = new Timestamp(System.currentTimeMillis()); //当前时间\r\n        IPage<Commodity> iPage = commodityDAO.sortByCredit(page, name, timestamp);\r\n        MyPage<Commodity> myPage = new MyPage<>(iPage);\r\n        return responseFromServer.success(myPage);\r\n    }\r\n\r\n    /**\r\n     * 插入商品\r\n     * @param commodity 商品\r\n     * @return 执行结果\r\n     */\r\n    @Options(useGeneratedKeys = true,keyProperty = \"id\",keyColumn = \"id\")\r\n    public responseFromServer insertCommodity(Commodity commodity, HttpSession session){\r\n        if(isIdentityError(commodity, session))  //身份检查\r\n            return responseFromServer.illegal();\r\n\r\n        if(commodityDAO.insert(commodity) != 1 || !insertCommodityInfo(commodity)){\r\n            /*回滚事务*/\r\n            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();\r\n            return responseFromServer.error();\r\n        }\r\n        return responseFromServer.success();\r\n    }\r\n\r\n    /**\r\n     * 更新商品\r\n     * @param commodity 商品\r\n     * @return 执行结果\r\n     */\r\n    public responseFromServer updateCommodity(Commodity commodity, HttpSession session){\r\n        if(isIdentityError(commodity, session))  //身份检查\r\n            return responseFromServer.illegal();\r\n        if(commodityDAO.updateById(commodity) != 1 || !updateCommodityInfo(commodity)){\r\n            /*回滚事务*/\r\n            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();\r\n            return responseFromServer.error();\r\n        }\r\n        else{\r\n            return responseFromServer.success();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除商品\r\n     * @param commodity 商品名\r\n     * @param session HttpSession\r\n     * @return 执行结果\r\n     */\r\n    public responseFromServer deleteCommodity(Commodity commodity, HttpSession session){\r\n        if(isIdentityError(commodity, session))  //身份检查\r\n            return responseFromServer.illegal();\r\n\r\n        deleteCommodityInfo(commodity);\r\n        if(commodityDAO.deleteById(commodity.getId()) != 1){\r\n            /*回滚事务*/\r\n            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();\r\n            return responseFromServer.error();\r\n        }\r\n        else{\r\n            return responseFromServer.success();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 添加商品类型、图片等信息\r\n     * @param commodity 商品\r\n     * @return 执行结果\r\n     */\r\n    @Transactional\r\n    public boolean insertCommodityInfo(Commodity commodity){\r\n        List<CommodityImage> commodityImageList = commodity.getCommodityImages();\r\n        List<Type> typeList = commodity.getTypes();\r\n\r\n        for(CommodityImage commodityImage:commodityImageList){\r\n            commodityImage.setCommodityId(commodity.getId());\r\n            if(commodityImageDAO.insert(commodityImage) != 1){\r\n                TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();\r\n                return false;\r\n            }\r\n        }\r\n        for(Type type:typeList){\r\n            type.setCommodityId(commodity.getId());\r\n            if(typeDAO.insert(type) != 1){\r\n                TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 更新商品信息\r\n     * @param commodity 商品\r\n     * @return 执行结果\r\n     */\r\n    @Transactional\r\n    public boolean updateCommodityInfo(Commodity commodity){\r\n        List<CommodityImage> commodityImageList = commodity.getCommodityImages();\r\n        List<Type> typeList = commodity.getTypes();\r\n\r\n        for(CommodityImage commodityImage:commodityImageList){\r\n            commodityImage.setCommodityId(commodity.getId());\r\n            if(commodityImageDAO.updateById(commodityImage) != 1){\r\n                TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();\r\n                return false;\r\n            }\r\n        }\r\n        for(Type type:typeList){\r\n            type.setCommodityId(commodity.getId());\r\n            if(typeDAO.updateById(type) != 1){\r\n                TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 查询某一notice下所有商品\r\n     * @param notice 通告\r\n     * @return 执行结果\r\n     */\r\n    public responseFromServer selectAllByNoticeId(Notice notice){\r\n        QueryWrapper<Commodity> queryWrapper = new QueryWrapper<>();\r\n        queryWrapper.eq(\"notice_id\", notice.getId());\r\n        List<Commodity> commodities = commodityDAO.selectWithCondition(queryWrapper);\r\n        return responseFromServer.success(commodities);\r\n    }\r\n\r\n    /**\r\n     * 删除某一notice下所有商品\r\n     * @param notice 通告\r\n     * @param session HttpSession\r\n     * @return 执行结果\r\n     */\r\n    @Transactional\r\n    public responseFromServer deleteAllByNoticeId(Notice notice, HttpSession session){\r\n        Account account = new Account(notice.getAccountId());\r\n        if(!AccountVerify.verify(account, session))  //用户合法性检查\r\n            return responseFromServer.error();\r\n\r\n        QueryWrapper<Commodity> queryWrapper = new QueryWrapper<>();\r\n        queryWrapper.eq(\"notice_id\", notice.getId());\r\n        List<Commodity> commodities = commodityDAO.selectWithCondition(queryWrapper);\r\n        for(Commodity commodity:commodities)\r\n            if(deleteCommodity(commodity, session).getStatus() == 1){\r\n                TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();\r\n                return responseFromServer.error();\r\n            }\r\n        return responseFromServer.success();\r\n    }\r\n\r\n    /**\r\n     * 删除图片、类型等信息,由于外键方式为CASCADE，因此只需删除本地缓存文件资源\r\n     * @param commodity 商品\r\n     */\r\n    public void deleteCommodityInfo(Commodity commodity){\r\n        List<CommodityImage> commodityImageList = commodity.getCommodityImages();\r\n        for(CommodityImage commodityImage:commodityImageList){\r\n            String path = commodityImage.getImageUrl();\r\n            File file = new File(path);\r\n            file.delete();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 返回图片路径\r\n     * @param files 文件数组\r\n     * @return 执行结果\r\n     */\r\n    public responseFromServer imageUrl(MultipartFile[] files){\r\n        QueryWrapper<CommodityImage> queryWrapper = new QueryWrapper<>();\r\n        List<CommodityImage> commodityImages = commodityImageDAO.selectList(queryWrapper);\r\n        List<String> paths = new ArrayList<>(); //存储附件路径\r\n        for(MultipartFile file:files) {\r\n            try {\r\n                byte[] bytes = file.getBytes();\r\n                String base = System.getProperty(\"user.dir\") + \"\\\\images\\\\\";\r\n                Path path = Paths.get(base + commodityImages.size() + 1);\r\n                //如果没有files文件夹，则创建\r\n                if (!Files.isWritable(path)) {\r\n                    Files.createDirectories(Paths.get(System.getProperty(\"user.dir\")));\r\n                }\r\n                //文件写入指定路径\r\n                Files.write(path, bytes);\r\n                paths.add(base + commodityImages.size() + 1);\r\n            }\r\n            catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        return responseFromServer.success(paths);\r\n    }\r\n\r\n    /**\r\n     * 用户身份检查\r\n     * @param commodity 商品\r\n     * @param session HttpSession\r\n     * @return 结果\r\n     */\r\n    public boolean isIdentityError(Commodity commodity, HttpSession session){\r\n        QueryWrapper<Commodity> queryWrapper = new QueryWrapper<>();\r\n        queryWrapper.eq(\"id\", commodity.getId());\r\n        Account account = commodityDAO.selectWithCondition(queryWrapper).get(0).getNotice().getUser();\r\n        return !AccountVerify.verify(account, session);\r\n    }\r\n\r\n    /**\r\n     * 筛选有剩余且未截止的商品\r\n     * @param commodities 商品集合\r\n     * @return 商品集合\r\n     */\r\n    public List<Commodity> selectByCountAndDate(List<Commodity> commodities){\r\n        List<Commodity> results = new ArrayList<>();\r\n        Timestamp timestamp = new Timestamp(System.currentTimeMillis()); //当前时间\r\n        for(Commodity commodity : commodities){\r\n            if(commodity.getCount() > 0 && timestamp.before(commodity.getNotice().getEndTime()))\r\n                results.add(commodity);\r\n        }\r\n        return results;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Backend/src/main/java/com/example/transaction/service/impl/CommodityServiceImpl.java	(revision f37b1ae87aecabf114267a7239c6673e41fe3999)
+++ Backend/src/main/java/com/example/transaction/service/impl/CommodityServiceImpl.java	(date 1588131636413)
@@ -179,6 +179,7 @@
      * @return 执行结果
      */
     @Transactional
+    @Options(useGeneratedKeys = true,keyProperty = "id",keyColumn = "id")
     public boolean insertCommodityInfo(Commodity commodity){
         List<CommodityImage> commodityImageList = commodity.getCommodityImages();
         List<Type> typeList = commodity.getTypes();
@@ -316,19 +317,4 @@
         Account account = commodityDAO.selectWithCondition(queryWrapper).get(0).getNotice().getUser();
         return !AccountVerify.verify(account, session);
     }
-
-    /**
-     * 筛选有剩余且未截止的商品
-     * @param commodities 商品集合
-     * @return 商品集合
-     */
-    public List<Commodity> selectByCountAndDate(List<Commodity> commodities){
-        List<Commodity> results = new ArrayList<>();
-        Timestamp timestamp = new Timestamp(System.currentTimeMillis()); //当前时间
-        for(Commodity commodity : commodities){
-            if(commodity.getCount() > 0 && timestamp.before(commodity.getNotice().getEndTime()))
-                results.add(commodity);
-        }
-        return results;
-    }
 }
Index: Backend/src/test/java/com/example/transaction/daoTest/CommodityDAOTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.transaction.daoTest;\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\r\nimport com.baomidou.mybatisplus.core.metadata.IPage;\r\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\r\nimport com.example.transaction.dao.CommodityDAO;\r\nimport com.example.transaction.pojo.Commodity;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\n\r\nimport java.sql.Timestamp;\r\n\r\n/**\r\n * @Author: 高战立\r\n * @Date: 2020/4/25 9:56\r\n * @Content: CommodityDAO测试\r\n */\r\n\r\n@SpringBootTest\r\npublic class CommodityDAOTest {\r\n\r\n    @Autowired\r\n    private CommodityDAO commodityDAO;\r\n\r\n    @Test\r\n    void testSelectWithCondition(){\r\n        QueryWrapper<Commodity> queryWrapper = new QueryWrapper<>();\r\n        queryWrapper.like(\"name\", \"%ello%\");  //模糊查找测试, queryWrapper条件是叠加的\r\n//        Timestamp timestamp = new Timestamp(System.currentTimeMillis()); //当前时间\r\n//        queryWrapper.eq(\"notice.type\", 1);\r\n//        List<Commodity> commodities = commodityDAO.selectWithCondition(queryWrapper);\r\n//        System.out.println(commodities.size());\r\n//        System.out.println(commodities.get(0));\r\n\r\n//        queryWrapper.between(\"expected_price\",5,20); //价格区间检索\r\n//        queryWrapper.eq(\"name\", \"yellow\");\r\n//        queryWrapper.orderByDesc(\"newness\");\r\n\r\n        Page<Commodity> page = new Page<>(1,2);\r\n        IPage<Commodity> iPage = commodityDAO.selectCommodityPage(page, queryWrapper);\r\n        System.out.println(page.getPages());\r\n        System.out.println(page.getTotal());\r\n        System.out.println(page.getRecords());\r\n//        List<Commodity> commodities = commodityDAO.selectWithCondition(queryWrapper);\r\n//        System.out.println(commodities);\r\n//        System.out.printlnln(commodities.size());\r\n//        System.out.println(commodities.toString());\r\n    }\r\n\r\n    @Test\r\n    //测试商品名模糊分页查询\r\n    void testSortByNewness(){\r\n        Timestamp timestamp = new Timestamp(System.currentTimeMillis()); //当前时间\r\n        Page<Commodity> page = new Page<>(2,1);\r\n        IPage<Commodity> iPage = commodityDAO.sortByNewness(page, \"ello\", timestamp);\r\n        System.out.println(page.getPages());\r\n        System.out.println(page.getTotal());\r\n        System.out.println(page.getRecords());\r\n    }\r\n\r\n    @Test\r\n    //测试价格区间查询\r\n    void testBetweenPrice(){\r\n        Timestamp timestamp = new Timestamp(System.currentTimeMillis()); //当前时间\r\n        Page<Commodity> page = new Page<>(2,1);\r\n        IPage<Commodity> iPage = commodityDAO.betweenPrice(page,\"ello\", 1, 50, timestamp);\r\n        System.out.println(page.getPages());\r\n        System.out.println(page.getTotal());\r\n        System.out.println(page.getRecords());\r\n    }\r\n\r\n    @Test\r\n    //测试类型分页\r\n    void testSortByType(){\r\n        Timestamp timestamp = new Timestamp(System.currentTimeMillis()); //当前时间\r\n        Page<Commodity> page = new Page<>(1,1);\r\n        IPage<Commodity> iPage = commodityDAO.sortByType(page, 1, timestamp);\r\n        System.out.println(page.getPages());\r\n        System.out.println(page.getTotal());\r\n        System.out.println(page.getRecords());\r\n    }\r\n\r\n    @Test\r\n    //测试商品名模糊分页查询，信誉排序\r\n    void testSortByCredit(){\r\n        Timestamp timestamp = new Timestamp(System.currentTimeMillis()); //当前时间\r\n        Page<Commodity> page = new Page<>(2,1);\r\n        IPage<Commodity> iPage = commodityDAO.sortByCredit(page, \"yell\", timestamp);\r\n        System.out.println(page.getPages());\r\n        System.out.println(page.getTotal());\r\n        System.out.println(page.getRecords());\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Backend/src/test/java/com/example/transaction/daoTest/CommodityDAOTest.java	(revision f37b1ae87aecabf114267a7239c6673e41fe3999)
+++ Backend/src/test/java/com/example/transaction/daoTest/CommodityDAOTest.java	(date 1588130519833)
@@ -10,6 +10,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 
 import java.sql.Timestamp;
+import java.util.List;
 
 /**
  * @Author: 高战立
@@ -27,25 +28,10 @@
     void testSelectWithCondition(){
         QueryWrapper<Commodity> queryWrapper = new QueryWrapper<>();
         queryWrapper.like("name", "%ello%");  //模糊查找测试, queryWrapper条件是叠加的
-//        Timestamp timestamp = new Timestamp(System.currentTimeMillis()); //当前时间
-//        queryWrapper.eq("notice.type", 1);
-//        List<Commodity> commodities = commodityDAO.selectWithCondition(queryWrapper);
-//        System.out.println(commodities.size());
-//        System.out.println(commodities.get(0));
 
-//        queryWrapper.between("expected_price",5,20); //价格区间检索
-//        queryWrapper.eq("name", "yellow");
-//        queryWrapper.orderByDesc("newness");
-
-        Page<Commodity> page = new Page<>(1,2);
-        IPage<Commodity> iPage = commodityDAO.selectCommodityPage(page, queryWrapper);
-        System.out.println(page.getPages());
-        System.out.println(page.getTotal());
-        System.out.println(page.getRecords());
-//        List<Commodity> commodities = commodityDAO.selectWithCondition(queryWrapper);
-//        System.out.println(commodities);
-//        System.out.printlnln(commodities.size());
-//        System.out.println(commodities.toString());
+        List<Commodity> commodities = commodityDAO.selectWithCondition(queryWrapper);
+        System.out.println(commodities.size());
+        System.out.println(commodities);
     }
 
     @Test
Index: Backend/src/main/resources/mapper/CommodityDAO.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n<mapper namespace=\"com.example.transaction.dao.CommodityDAO\">\r\n    <!--查询与account关联的所有信息，如commodityList、notice、commodityImages-->\r\n    <resultMap id=\"commodityInfo\" type=\"commodity\">\r\n        <id property=\"id\" column=\"id\"/>\r\n        <association property=\"notice\" javaType=\"com.example.transaction.pojo.Notice\" column=\"notice_id\" select=\"com.example.transaction.dao.NoticeDAO.getCreditByNoticeId\"/>\r\n        <collection property=\"types\" ofType=\"com.example.transaction.pojo.Type\" column=\"id\" select=\"com.example.transaction.dao.TypeDAO.getAllTypeByCommodityId\"/>\r\n        <collection property=\"commodityImages\" ofType=\"com.example.transaction.pojo.CommodityImage\" column=\"id\" select=\"com.example.transaction.dao.CommodityImageDAO.getAllImageByCommodityId\"/>\r\n        <collection property=\"reservation\" ofType=\"com.example.transaction.pojo.Reservation\" column=\"id\" select=\"com.example.transaction.dao.ReservationDAO.getAllReservationByCommodityId\"/>\r\n    </resultMap>\r\n\r\n    <select id=\"selectWithCondition\" resultMap=\"commodityInfo\" resultType=\"com.example.transaction.pojo.Commodity\">\r\n        select * from commodity ${ew.customSqlSegment}\r\n    </select>\r\n\r\n    <!--分页查询-->\r\n    <select id=\"selectCommodityPage\" resultMap=\"commodityInfo\" resultType=\"com.example.transaction.pojo.Commodity\">\r\n        select * from commodity ${ew.customSqlSegment}\r\n    </select>\r\n\r\n    <!--商品名模糊分页查询，新旧程度排序-->\r\n    <select id=\"sortByNewness\" resultMap=\"commodityInfo\" resultType=\"com.example.transaction.pojo.Commodity\">\r\n        select * from commodity c, notice n where c.name like concat('%',#{name},'%') and c.notice_id = n.id and n.end_time &gt;= #{timestamp} order by c.newness Desc, c.expected_price ASC\r\n    </select>\r\n    <!--商品类型分页查询-->\r\n    <select id=\"sortByType\" resultMap=\"commodityInfo\" resultType=\"com.example.transaction.pojo.Commodity\">\r\n        select * from commodity c, notice n, `type` t where c.id = t.commodity_id and c.notice_id = n.id and n.end_time &gt;= #{timestamp} and t.id = #{typeId}\r\n    </select>\r\n    <!--商品价格区间分页查询-->\r\n    <select id=\"betweenPrice\" resultMap=\"commodityInfo\" resultType=\"com.example.transaction.pojo.Commodity\">\r\n        select * from commodity c, notice n where c.name like concat('%',#{name},'%') and  c.expected_price between #{low} and #{high} and c.notice_id = n.id and n.end_time &gt;= #{timestamp}\r\n    </select>\r\n    <!--商品名模糊分页查询, 所有者信誉排序-->\r\n    <select id=\"sortByCredit\" resultMap=\"commodityInfo\" resultType=\"com.example.transaction.pojo.Commodity\">\r\n        select * from commodity c, notice n, account a, estimate e where n.account_id = a.id and c.name like concat('%',#{name},'%') and c.notice_id = n.id and e.account_id = a.id and n.end_time &gt;= #{timestamp} order by (e.purchase_credit + e.sell_credit) DESC, c.expected_price ASC\r\n    </select>\r\n</mapper>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Backend/src/main/resources/mapper/CommodityDAO.xml	(revision f37b1ae87aecabf114267a7239c6673e41fe3999)
+++ Backend/src/main/resources/mapper/CommodityDAO.xml	(date 1588130571296)
@@ -14,11 +14,6 @@
         select * from commodity ${ew.customSqlSegment}
     </select>
 
-    <!--分页查询-->
-    <select id="selectCommodityPage" resultMap="commodityInfo" resultType="com.example.transaction.pojo.Commodity">
-        select * from commodity ${ew.customSqlSegment}
-    </select>
-
     <!--商品名模糊分页查询，新旧程度排序-->
     <select id="sortByNewness" resultMap="commodityInfo" resultType="com.example.transaction.pojo.Commodity">
         select * from commodity c, notice n where c.name like concat('%',#{name},'%') and c.notice_id = n.id and n.end_time &gt;= #{timestamp} order by c.newness Desc, c.expected_price ASC
Index: Backend/src/main/java/com/example/transaction/dao/CommodityDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.transaction.dao;\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.Wrapper;\r\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\r\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\r\nimport com.baomidou.mybatisplus.core.metadata.IPage;\r\nimport com.baomidou.mybatisplus.core.toolkit.Constants;\r\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\r\nimport com.example.transaction.pojo.Commodity;\r\nimport com.example.transaction.pojo.Notice;\r\nimport org.apache.ibatis.annotations.*;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.sql.Timestamp;\r\nimport java.util.List;\r\n\r\n/**\r\n * @Author: 高战立\r\n * @Date: 2020/4/25 9:14\r\n * @Content: 商品表数据层\r\n */\r\n\r\n@Repository\r\npublic interface CommodityDAO extends BaseMapper<Commodity> {\r\n    //利用queryWrapper查找\r\n    List<Commodity> selectWithCondition(@Param(\"ew\") QueryWrapper<Commodity> wrapper);\r\n    //分页查询\r\n    IPage<Commodity> selectCommodityPage(Page<Commodity> page,  @Param(Constants.WRAPPER) Wrapper<Commodity> wrapper);\r\n    //商品名模糊分页查询，新旧程度排序\r\n    IPage<Commodity> sortByNewness(Page<?> page, String name, Timestamp timestamp);\r\n    //商品类型分页查询\r\n    IPage<Commodity> sortByType(Page<?> page, Integer typeId, Timestamp timestamp);\r\n    //商品价格区间分页查询\r\n    IPage<Commodity> betweenPrice(Page<?> page, String name, Integer low, Integer high, Timestamp timestamp);\r\n    //商品名模糊分页查询, 所有者信誉排序\r\n    IPage<Commodity> sortByCredit(Page<?> page, String name, Timestamp timestamp);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Backend/src/main/java/com/example/transaction/dao/CommodityDAO.java	(revision f37b1ae87aecabf114267a7239c6673e41fe3999)
+++ Backend/src/main/java/com/example/transaction/dao/CommodityDAO.java	(date 1588130571305)
@@ -1,14 +1,11 @@
 package com.example.transaction.dao;
 
-import com.baomidou.mybatisplus.core.conditions.Wrapper;
 import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
-import com.baomidou.mybatisplus.core.toolkit.Constants;
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import com.example.transaction.pojo.Commodity;
-import com.example.transaction.pojo.Notice;
-import org.apache.ibatis.annotations.*;
+import org.apache.ibatis.annotations.Param;
 import org.springframework.stereotype.Repository;
 
 import java.sql.Timestamp;
@@ -24,8 +21,6 @@
 public interface CommodityDAO extends BaseMapper<Commodity> {
     //利用queryWrapper查找
     List<Commodity> selectWithCondition(@Param("ew") QueryWrapper<Commodity> wrapper);
-    //分页查询
-    IPage<Commodity> selectCommodityPage(Page<Commodity> page,  @Param(Constants.WRAPPER) Wrapper<Commodity> wrapper);
     //商品名模糊分页查询，新旧程度排序
     IPage<Commodity> sortByNewness(Page<?> page, String name, Timestamp timestamp);
     //商品类型分页查询
